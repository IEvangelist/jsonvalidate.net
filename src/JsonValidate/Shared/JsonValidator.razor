@using System.Text.Json
@using JsonValidate.JSInterop
@inject IJSRuntime JsRuntime
@using JsonValidate.Helpers

<div>
    <div class="form-group">
        <label for="textInput">Enter JSON</label>
        <textarea @ref="Editor" id="textInput"></textarea>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" aria-label="Validate JSON" @onclick="Validate">Validate</button>
        <button class="btn btn-secondary" aria-label="Clear JSON" @onclick="Clear">Clear</button>
        <button class="btn btn-info" aria-label="Copy JSON" @onclick="Copy">Copy</button>
    </div>    
    @if (IsError)
    {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }
    else if (!string.IsNullOrEmpty(Message)) {
        <div class="alert alert-success" role="alert">
            @Message
        </div>
    }
</div>

@code {
    public bool IsError { get; set; }
    public string Message { get; set; }
    public int LineError { get; set; }
    public int PosError { get; set; }
    public JsonSerializerOptions Options = new JsonSerializerOptions { WriteIndented = true };
    public ElementReference Editor;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await CodeMirror.Create(JsRuntime, Editor);
        }
    }

    async Task Validate() {
        try {            
            var input = await CodeMirror.GetValue(JsRuntime);
            if (string.IsNullOrEmpty(input) || string.IsNullOrWhiteSpace(input)) {
                throw new ArgumentException("Error: input was empty.");
            }
            var jsonDoc = JsonSerializer.Deserialize<object>(input);
            var newInput = JsonSerializer.Serialize(jsonDoc, Options);
            await CodeMirror.SetValue(JsRuntime, newInput);
            IsError = false;
            Message = "JSON valid!";
        }
        catch (Exception e) {
            IsError = true;
            Message = e.Message;
            try {
                var (line, pos) = ErrorHelper.ParseError(Message);
                await CodeMirror.Highlight(JsRuntime, line, 0, line, 9999);
            }
            catch(Exception)
            {
                // Message did not contain line, pos
            }
        }
    }

    async Task Clear() {
        await CodeMirror.Clear(JsRuntime);
        IsError = false;
        Message = string.Empty;    
    }

    async Task Copy() {
        var input = await CodeMirror.GetValue(JsRuntime);
        await Clipboard.WriteTextAsync(JsRuntime, input);
    }
}
