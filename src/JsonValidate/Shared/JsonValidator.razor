@using System.Text.Json
@using JsonValidate.JSInterop
@inject IJSRuntime JsRuntime
@using JsonValidate.Helpers

<div>
    <div class="form-group">
        <label for="text">Enter JSON</label>
        <textarea @ref="editor" @ref:suppressField></textarea>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="Validate">Validate</button>
        <button class="btn btn-secondary" @onclick="Clear">Clear</button>
        <button class="btn btn-info" @onclick="Copy">Copy</button>
    </div>    
    @if (IsError)
    {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }
    else if (!string.IsNullOrEmpty(Message)) {
        <div class="alert alert-success" role="alert">
            @Message
        </div>
    }
</div>

@code {
    bool IsError { get; set; }
    string Message { get; set; }
    int LineError { get; set; }
    int PosError { get; set; }
    JsonSerializerOptions Options = new JsonSerializerOptions { WriteIndented = true };
    ElementReference editor;
    bool editorHasRendered;

    protected override void OnAfterRender() {
        if (!editorHasRendered) {
            CodeMirror.Create(JsRuntime, editor);
            editorHasRendered = true;
        }
    }

    void Validate() {
        try {            
            var input = CodeMirror.GetValue(JsRuntime);
            if (string.IsNullOrEmpty(input) || string.IsNullOrWhiteSpace(input)) {
                throw new ArgumentException("Error: input was empty.");
            }
            var jsonDoc = JsonSerializer.Deserialize<object>(input);
            var newInput = JsonSerializer.Serialize(jsonDoc, Options);
            CodeMirror.SetValue(JsRuntime, newInput);
            IsError = false;
            Message = "JSON valid!";
        }
        catch (Exception e) {
            IsError = true;
            Message = e.Message;
            try {
                var (line, pos) = ErrorHelper.ParseError(Message);
                Console.WriteLine($"Line: {line}, Pos: {pos}");
                CodeMirror.Highlight(JsRuntime, line, 0, line, 9999);
            }
            catch(Exception)
            {
                // Message did not contain line, pos
            }
        }
    }

    void Clear() {
        CodeMirror.Clear(JsRuntime);
        IsError = false;
        Message = string.Empty;    
    }

    async void Copy() {
        var input = CodeMirror.GetValue(JsRuntime);
        await Clipboard.WriteTextAsync(JsRuntime, input);
    }
}
